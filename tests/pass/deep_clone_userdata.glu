let { run, writer, assert, assert_ieq, assert_feq } = import! std.test
let prelude = import! std.prelude
let { (*>) } = prelude.make_Applicative writer.applicative
let { Result } = import! std.result
let { ref, load } = import! "reference"
let { lazy, force } = import! "lazy"


let _ =
    let { sender, receiver } = channel (lazy (\_ -> 0))

    let thread = spawn (\_ ->
            send sender (lazy (\_ -> 1))
            let l = lazy (\_ -> 2)
            force l
            send sender l
            ())

    resume thread
    match recv receiver with
    | Ok x -> assert (force x == 1)
    | Err e -> error "Receive 1 error"
    match recv receiver with
    | Ok x -> assert (force x == 2)
    | Err e -> error "Receive 2 error"

let _ =
    let { sender, receiver } = channel (ref 0)

    let thread = spawn (\_ ->
            send sender (ref 3)
            ())

    resume thread
    match recv receiver with
    | Ok x -> assert (load x == 3)
    | Err e -> error "Receive 3 error"

()

let { run, TestEff, assert_eq, test, ? }  = import! std.test
let { (<|) } = import! std.function
let prelude  = import! std.prelude
let { Bool } = import! std.bool
let int = import! std.int
let result @ { Result, ? } = import! std.result
let string = import! std.string
let unit @ { ? } = import! std.unit
let { Applicative, (*>) } = import! std.applicative
let { flat_map } = import! std.monad
let { send, recv, channel } = import! std.channel
let { spawn, yield, resume } = import! std.thread

let { ? } = import! std.effect

let assert_any_err =
    assert_eq ?(result.show ?string.show ?unit.show)
              ?(result.eq ?{ (==) = \x y -> True } ?unit.eq)

let { sender, receiver } = channel 0

let thread = spawn (\_ ->
        send sender 0
        yield ()
        send sender 1
        ()
    )
resume thread

let tests : TestEff r () =
    assert_eq (recv receiver) (Ok 0) *> (
            seq assert_eq (recv receiver) (Err ())
            resume thread
            assert_eq (recv receiver) (Ok 1)
        ) *> (
            seq assert_eq (recv receiver) (Err ())
            assert_any_err (resume thread) (Err "Any error message here")
        )

test "thread" <| \_ -> tests

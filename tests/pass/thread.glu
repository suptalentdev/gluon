let { run, writer, old_assert_eq, ? }  = import! std.test
let prelude  = import! std.prelude
let { Bool } = import! std.bool
let int = import! std.int
let result @ { Result } = import! std.result
let string = import! std.string
let unit = import! std.unit
let { Applicative, (*>) } = import! std.applicative
let { flat_map } = import! std.prelude
let { send, recv, channel } = import! std.channel
let { spawn, yield, resume } = import! std.thread

let assert =
    old_assert_eq (result.show ?unit.show ?int.show) (result.eq ?unit.eq ?int.eq)
let assert_any_err =
    old_assert_eq (result.show ?string.show ?unit.show)
              (result.eq ?{ (==) = \x y -> True } ?unit.eq)

let { sender, receiver } = channel 0

let thread = spawn (\_ ->
        send sender 0
        yield ()
        send sender 1
        ()
    )
resume thread

let tests =
    assert (recv receiver) (Ok 0) *> (
            do _ = assert (recv receiver) (Err ())
            resume thread
            assert (recv receiver) (Ok 1)
        ) *> (
            do _ = assert (recv receiver) (Err ())
            assert_any_err (resume thread) (Err "Any error message here")
        )

run tests

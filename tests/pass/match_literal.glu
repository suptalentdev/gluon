let prelude = import! std.prelude
let { run, writer, assert_eq, ? } = import! std.test
let int = import! std.int
let { (*>) } = import! std.applicative

let assert_ieq = assert_eq int.show int.eq

let ints input =
    match input with
    | 0 -> 1
    | 1 -> 2
    | _ -> 3

let strings input =
    match input with
    | "A" -> 4
    | "B" -> 5
    | _ -> 6

type N = | A Int | B

let ns input =
    match input with
    | A 1 -> 7
    | A 2 -> 8
    | B -> 9
    | _ -> 10

type R1 = { x: Int }

let r1 input =
    match input with
    | { x = 2 } -> 11
    | { x = 3 } -> 12
    | _ -> 13

type R2 = { x: Int, y: Int }

let r2 input =
    match input with
    | { x = 2, y = 3 } -> 14
    | { x = 3, y = 4 } -> 15
    | _ -> 16

type TestM = | TestM Int String

let test_m input =
    match input with
    | TestM 1 "hello" -> 20
    | TestM _ "world" -> 21
    | TestM 2 _ -> 22
    | _ -> 23

let match_ns =
    assert_ieq (ns (A 1)) 7
        *> assert_ieq (ns (A 2)) 8
        *> assert_ieq (ns B) 9
        *> assert_ieq (ns (A 3)) 10

let match_ints =
    assert_ieq (ints 0) 1
        *> assert_ieq (ints 1) 2
        *> assert_ieq (ints 2) 3
        *> assert_ieq (ints 3) 3

let match_strings =
    assert_ieq (strings "A") 4
        *> assert_ieq (strings "B") 5
        *> assert_ieq (strings "") 6

let match_r1 =
    assert_ieq (r1 { x = 2 }) 11
        *> assert_ieq (r1 { x = 3 }) 12
        *> assert_ieq (r1 { x = 4 }) 13

let match_r2 =
    assert_ieq (r2 { x = 2, y = 3 }) 14
        *> assert_ieq (r2 { x = 3, y = 4 }) 15
        *> assert_ieq (r2 { x = 4, y = 4 }) 16

let match_test_m =
    assert_ieq (test_m (TestM 1 "hello")) 20
        *> assert_ieq (test_m (TestM 2 "world")) 21
        *> assert_ieq (test_m (TestM 2 "hello")) 22
        *> assert_ieq (test_m (TestM 3 "")) 23

let tests =
    match_ints *> match_strings *> match_ns *> match_r1 *> match_r2 *> match_test_m

run tests

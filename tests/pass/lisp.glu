let prelude = import "std/prelude.glu"
let { List } = prelude
let { Test, run, writer, assert_eq, assert_seq, assert_ieq } = import "std/test.glu"
let { Ord, Num, List, Option, Monoid } = prelude
let { (*>) } = prelude.make_Applicative writer.applicative

let string = import "std/string.glu"
let parser = import "std/parser.glu"

let lisp = import "examples/lisp/lisp.glu"
let { Expr } = lisp

let assert_leq =
    assert_eq (prelude.show_Result string.show lisp.show) (prelude.eq_Result string.eq lisp.eq)

let parser_tests =
    assert_leq (parser.parse lisp.expr "test") (Ok (Atom "test")) *>
        assert_leq
            (parser.parse lisp.expr "()")
            (Ok (List Nil)) *>
        assert_leq
            (parser.parse lisp.expr "(test abc)")
            (Ok (List (Cons (Atom "test") (Cons (Atom "abc") Nil)))) *>
        assert_leq
            (parser.parse lisp.expr " ( test abc ) ")
            (Ok (List (Cons (Atom "test") (Cons (Atom "abc") Nil)))) *>
        assert_leq
            (parser.parse lisp.expr "(test (abc) d)")
            (Ok (List (Cons (Atom "test") (Cons (List (Cons (Atom "abc") Nil)) (Cons (Atom "d") Nil))))) *>
        assert_leq
            (parser.parse lisp.expr "(test 123)")
            (Ok (List (Cons (Atom "test") (Cons (Int 123) Nil)))) *>
        assert_leq
            (parser.parse lisp.expr "123.45")
            (Ok (Float 123.45))

let { (>>=) } = prelude.make_Monad prelude.monad_Result
let eval_string s = parser.parse lisp.expr s >>= lisp.eval

let eval_tests =
    assert_leq (lisp.eval (Int 123)) (Ok (Int 123)) *>
        assert_leq
            (lisp.eval (List (Cons (Atom "+") (Cons (Int 1) (Cons (Int 2) Nil)))))
            (Ok (Int 3)) *>
        assert_leq
            (eval_string "()")
            (Ok (List Nil)) *>
        assert_leq
            (eval_string "(+ 1 2 3 4)")
            (Ok (Int (1 + 2 + 3 + 4))) *>
        assert_leq
            (eval_string "(+ 1.0 2.5 3.14)")
            (Ok (Float (1.0 + 2.5 + 3.14))) *>
        assert_leq
            (eval_string "(+ 1.0 (+ 2.5 3.14))")
            (Ok (Float (1.0 + 2.5 + 3.14))) *>
        assert_leq
            (eval_string "(+ (+ 1 2) (+ 3 4))")
            (Ok (Int (1 + 2 + 3 + 4)))

let tests = parser_tests *> eval_tests

run tests

let prelude = import! std.prelude
let { run, writer, assert_eq, assert_ieq } = import! std.test
let { (*>) } = prelude.make_Applicative writer.applicative
let int = import! std.int
let { (+) } = int.num
let { (<) } = prelude.make_Ord int.ord
let stream  = import! std.stream
let list @ { List } = import! std.list
let { Option } = import! std.option

let s = stream.from (\i -> if i < 5 then Some i else None)

let assert_leq s a =
    assert_eq
        (list.show int.show)
        (list.eq int.eq)
        (stream.to_list s)
        (list.of a)

assert_ieq (stream.fold (+) 0 s) 10
    *> assert_leq s [4, 3, 2, 1, 0]
    *> assert_leq (stream.functor.map (\x -> x + x) s) [8, 6, 4, 2, 0]
    *> assert_leq (stream.zip_with (+) s s) [8, 6, 4, 2, 0]

let prelude  = import! "std/prelude.glu"
let { run, writer, assert_eq, assert_ieq }  = import! "std/test.glu"
let stream  = import! "std/stream.glu"
let { Ord, Num, List, Option } = prelude
let { (<) } = prelude.make_Ord prelude.ord_Int
let { (+) } = prelude.num_Int
let { (*>) } = prelude.make_Applicative writer.applicative

let s = stream.from (\i -> if i < 5 then Some i else None)

let assert_leq s a =
    assert_eq
        (prelude.show_List prelude.show_Int)
        (prelude.eq_List prelude.eq_Int)
        (stream.to_list s)
        (prelude.list a)

assert_ieq (stream.fold (+) 0 s) 10
    *> assert_leq s [4, 3, 2, 1, 0]
    *> assert_leq (stream.functor.map (\x -> x + x) s) [8, 6, 4, 2, 0]
    *> assert_leq (stream.zip_with (+) s s) [8, 6, 4, 2, 0]

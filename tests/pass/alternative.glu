let { run, Test, TestCase, assert_eq, test, group, ? } = import! std.test
let prelude @ { Alternative } = import! std.prelude
let { Applicative, (*>) } = import! std.applicative
let int = import! std.int
let list @ { ? }= import! std.list
let option = import! std.option

let test_alt ?alt show eq : [Alternative f] -> Show (f Int) -> Eq (f Int) -> _ =
    let { (<|>), or, empty } = import! std.prelude
    let { wrap } = alt.applicative

    let assert = assert_eq ?show ?eq

    [
        test "empty equal" (assert empty empty),
        test "or selects non-empty" (assert (empty <|> wrap 1) (wrap 1)),
        test "empty <|> empty == empty" (assert (empty <|> empty) empty),
        test "or selects non-empty 2" (assert (empty <|> empty <|> wrap 10) (wrap 10))
    ]

let tests: TestCase () =
    group "alternative" [
        group "option" (test_alt option.show option.eq),
        group "list" (test_alt list.show list.eq)
    ]

tests


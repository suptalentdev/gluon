let prelude = import! std.prelude
let function = import! std.function
let io @ { ? } = import! std.io
let { (<<), ? } = import! std.function
let string = import! std.string
let { Bool } = import! std.bool
let { Functor, Applicative, Alternative, Monad } = prelude
let { id } = import! std.prelude
let { flat_map } = import! std.monad
let { wrap, (*>) } = import! std.applicative
let { or, empty, (<|>) } = import! std.alternative

let {
    Method,
    Failure,
    Request,
    StatusCode,
    Response,
    Handler,
    HttpState } = import! examples.http.types
let http_prim = import! http.prim

let status =
    let code : Int -> StatusCode = id 
    {
        ok = code 200,
        bad_request = code 400,
        not_found = code 404,
        internal_server_error = code 500,
    }

let method =
    let method : String -> Method = id 
    {
        get = method "GET",
        post = method "POST",
        put = method "PUT",
    }

/// Force the value to be a Handler. Necessary to make the the type inference work for
/// higher-kinded types
let make : Handler a -> Handler a = id

let functor : Functor Handler = {
    map = \f handler ->
        // FIXME type inference fails without this
        let handler = make handler
        make (\success failure state -> handler (success << f) failure state),
}

let flat_map f handler : (a -> Handler b) -> Handler a -> Handler b =
    // FIXME type inference fails without this
    let handler = make handler
    make (\success failure state ->
        let success2 a r = make (f a) success failure state
        handler success2 failure state)


let applicative : Applicative Handler = {
    functor,
    apply = \a m ->
        let m = make m
        flat_map (\f -> functor.map f m) a,
    wrap = \a -> make (\success _ state -> success a state),
}

let alternative : Alternative Handler = {
    applicative,
    // Tries to handle the request with `l`, if it fails with `DontProcess` then `r` is tried instead
    or = \l r -> make (\success failure state ->
            let failure2 reason state2 =
                match reason with
                | DontProcess -> make r success failure state2
                | Error _ -> failure reason state2

            make l success failure2 state),
    empty = make (\_ failure state -> failure DontProcess state),
}

let monad : Monad Handler = {
    applicative,
    flat_map,
}

/// Handles the request if `predicate` returns `True
let test predicate : (Request -> Bool) -> Handler () =
    \success failure state ->
    if predicate state.request
    then success () state
    else failure DontProcess state

/// Handles `Get` requests
let get : Handler () =
    test (\request -> request.method == method.get)

/// Handles `Post` requests
let post : Handler () =
    test (\request -> request.method == method.post)

/// Processes this handler if `uri` matches the request's uri
let path uri : String -> Handler () =
    test (\request -> request.uri == uri)

/// Retrieves the HTTP request
let get_request : Handler Request =
    \success _ state -> success state.request state

/// Retrieves the body of the http response
let get_response_body : Handler ResponseBody =
    make (\success failure state -> success state.response state)

/// Returns `OK` with an empty body
let empty_response = { status = status.ok }

/// Converts an `IO` into a `Handler`
let io_handler action : IO a -> Handler a =
    make (\success _ state -> io.monad.flat_map (\a -> success a state) action)

/// Write `bytes` to the http response
let write_response bytes : Array Byte -> Handler () =
    do response = get_response_body
    io_handler (http_prim.write_response response bytes)

/// Throws an exception which aborts the current handler. Can be caught with `catch_error`
let fail msg : String -> Handler a =
    make (\_ failure state -> failure (Error msg) state)

/// Recovers from an exception thrown by `fail`
let catch_error action catch : Handler a -> (String -> Handler a) -> Handler a =
    make (\success failure state ->
        let failure2 reason state2 =
            match reason with
            | DontProcess -> failure reason state2
            | Error msg -> catch msg success failure state2
        action success failure2 state)

/// Takes a `Handler` and a `Request` tries to process the request
let handle handler state : Handler Response -> HttpState -> IO Response =
    let not_found _ state : _ -> _ -> IO Response =
        http_prim.write_response state.response  (string.as_bytes "Page not found") *> wrap { status = status.not_found }
    handler (\response _ -> wrap response) not_found state

{
    Method,
    Failure,
    Request,
    StatusCode,
    Response,
    Handler,

    functor,
    applicative,
    alternative,
    monad,

    status,
    method,

    empty_response,
    get_request,
    handle,
    get,
    post,
    path,
    listen = http_prim.listen,
    read_chunk = http_prim.read_chunk,
    write_response,
    io_handler,
    fail,
    catch_error,
}

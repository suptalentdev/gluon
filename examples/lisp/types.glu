let { List } = import! std.list
let { Map } = import! std.map
let { Option } = import! std.option
let { Result } = import! std.result

rec
type Expr =
    | Atom String
    | Int Int
    | Float Float
    | List (List Expr)
    | Function Function
    | Primitive (List Expr -> Lisp Expr)
type Function = {
    params : List String,
    vararg : Option String,
    body : List Expr,
    closure : Map String Expr
}
type LispState = Map String Expr
type Lisp a = LispState -> Result String { value : a, state : LispState }
in

{ Expr, Function, LispState, Lisp }

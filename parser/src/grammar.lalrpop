use crate::itertools::{Either, Itertools};

use crate::base::{
    ast::{Alternative, Argument, Array, AstType, Do, Expr, ExprField, Lambda, Literal, Pattern,
    PatternField, SpannedExpr, SpannedIdent, SpannedPattern, TypeBinding, TypedIdent, ValueBinding, ValueBindings},
    kind::{ArcKind, Kind},
    pos::{self, BytePos, Spanned},
    types::{Alias, AliasData, ArcType, ArgType, BuiltinType, Field, Generic, Type, TypeCache},
    metadata::{Attribute, Metadata, Comment},
};

use std::str::FromStr;

use crate::{ReplLine, new_ident};
use crate::token::Token;
use crate::ordered_float::NotNan;

use crate::{Error, ErrorEnv, FieldExpr, FieldPattern, MutIdentEnv};

grammar<'input, 'env, Id>(input: &'input crate::ParserSource, type_cache: &TypeCache<Id, ArcType<Id>>, env: MutIdentEnv<'env, Id>, errors: ErrorEnv<'env, 'input>)
    where Id: Clone + AsRef<str>;

extern {
    type Location = BytePos;
    type Error = Spanned<Error, BytePos>;

    enum Token<'input> {
        "shebang line" => Token::ShebangLine(<&'input str>),
        "identifier" => Token::Identifier(<&'input str>),
        "operator" => Token::Operator(<&'input str>),
        "string literal" => Token::StringLiteral(<String>),
        "char literal" => Token::CharLiteral(<char>),
        "int literal" => Token::IntLiteral(<i64>),
        "byte literal" => Token::ByteLiteral(<u8>),
        "float literal" => Token::FloatLiteral(<f64>),
        "documentation comment" => Token::DocComment(<Comment>),

        "rec" => Token::Rec,
        "else" => Token::Else,
        "forall" => Token::Forall,
        "if" => Token::If,
        "in" => Token::In,
        "let" => Token::Let,
        "do" => Token::Do,
        "seq" => Token::Seq,
        "match" => Token::Match,
        "then" => Token::Then,
        "type" => Token::Type,
        "with" => Token::With,

        "@" => Token::At,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        ".." => Token::DotDot,
        "=" => Token::Equals,
        "\\" => Token::Lambda,
        "|" => Token::Pipe,
        "->" => Token::RArrow,
        "?" => Token::Question,

        "{" => Token::LBrace,
        "[" => Token::LBracket,
        "(" => Token::LParen,

        "}" => Token::RBrace,
        "]" => Token::RBracket,
        ")" => Token::RParen,

        "#[" => Token::AttributeOpen,

        "block open" => Token::OpenBlock,
        "block close" => Token::CloseBlock,
        "block separator" => Token::Semi,
    }
}

// Utils

SingleComma: () = {
    "," => (),
    <!> => errors.push(<>.error)
};

Sep<Rule, Separator>: Vec<Rule> =
    <rules: (<Rule> Separator)*> <last: Rule?> => {
        let mut rules = rules;
        rules.extend(last);
        rules
    };

Comma<Rule>: Vec<Rule> = {
    Sep<Rule, SingleComma>
};

Sp<Rule>: Spanned<Rule, BytePos> =
    <l: @L> <rule: Rule> <r: @R> =>
        pos::spanned2(l, r, rule);

IdentStr: &'input str = {
    "identifier" => <>,
    "(" <"operator"> ")" => <>,
};

RecoverError: () = {
    <!> => errors.push(<>.error),
};

SkipExtraTokens: () = {
    => (),
    RecoverError,
};

Ident: Id =
    IdentStr => env.from_str(<>);

CtorIdent: Id =
    Sp<Ident> => {
        if !env.string(&<>.value).starts_with(char::is_uppercase) {
            errors.push(::lalrpop_util::ParseError::User {
                error: pos::spanned(<>.span, format!("Constructors must start with an uppercase letter").into()),
            });
        }
        <>.value
    };

SpannedIdent: SpannedIdent<Id> =
    Sp<Ident> => pos::spanned(<>.span, new_ident(type_cache, <>.value));

Operator: TypedIdent<Id> =
    "operator" => new_ident(type_cache, env.from_str(<>));

DocComment: Comment =
    "documentation comment"+ => {
        let typ = <>.last().unwrap().typ;
        Comment {
            typ: typ,
            content: <>.into_iter().map(|comment| comment.content).join("\n")
        }
    };

Any: () = {
    <"identifier">,
    <"operator">,
    <"string literal">,
    <"char literal">,
    <"int literal">,
    <"byte literal">,
    <"float literal">,

    <",">,
    <"=">,

    "(" AttributeContents ")",
    "[" AttributeContents "]",
    "{" AttributeContents "}",
};
 
AttributeContents: () = {
    Any*
};

AttributeArguments: Option<String> = {
    "(" <start: @L> AttributeContents <end: @R> ")" =>
        Some(input.src()[(start.to_usize() - input.start_index().to_usize())..(end.to_usize() - input.start_index().to_usize())].to_string()),
    => None,
};

Attribute: Attribute = {
    "#[" <name: IdentStr> <arguments: AttributeArguments> "]" => Attribute { name: name.into(), arguments, },
};

Metadata: Metadata = {
    <comment: DocComment> => Metadata { comment: Some(comment), .. Metadata::default() },
    <comment: DocComment> <attributes: Attribute+> => Metadata { comment: Some(comment), attributes, .. Metadata::default() },
    <attributes: Attribute+> => Metadata { attributes, .. Metadata::default() },
};

// Kinds

AtomicKind: ArcKind = {
    <l: @L> <id: "identifier"> <r: @R> =>? {
        use lalrpop_util::ParseError;

        match id {
            "_" => Ok(type_cache.kind_cache.hole()),
            "Type" => Ok(type_cache.kind_cache.typ()),
            "Row" => Ok(type_cache.kind_cache.row()),
            id => Err(ParseError::User {
                error: pos::spanned2(
                    l.into(),
                    r.into(),
                    Error::UnexpectedToken(
                        "identifier".to_string(),
                        ["_", "Row", "Type"].iter().map(|s| s.to_string()).collect())),
            }),
        }
    },

    "(" <kind: Kind> ")" => kind,
};

Kind: ArcKind = {
    AtomicKind,

    <lhs: AtomicKind> "->" <rhs: Kind> =>
        Kind::function(lhs, rhs),
};

// Types

TypeParam: Generic<Id> = {
    <id : Ident> =>
        Generic::new(id, type_cache.kind_cache.hole()),

    "(" <id: Ident> ":" <kind: Kind> ")" =>
        Generic::new(id, kind),
};

RecordField: Either<Field<Id, Alias<Id, AstType<Id>>>, Field<Id, AstType<Id>>> = {
    <comment: DocComment?> <id: Sp<Ident>> <args: Ident*> <alias: ("=" <Sp<Type_>>)> => {
        let span = id.span;
        Either::Left(Field::new(
            id.value.clone(),
            Alias::from(AliasData::new(
                id.value,
                args.into_iter()
                    .map(|id| Generic::new(id, type_cache.kind_cache.hole()))
                    .collect(),
                AstType::with_comment(comment, alias),
            )),
        ))
    },
    <comment: DocComment?> <id: Sp<Ident>> => {
        let span = id.span;
        Either::Left(Field::new(
            id.value.clone(),
            Alias::new(
                id.value,
                Vec::new(),
                AstType::with_comment(comment, pos::spanned(span, Type::Hole)),
            ),
        ))
    },
    <comment: DocComment?> <id: Ident> ":" <typ: Sp<Type_>> => {
        if env.string(&id).starts_with(char::is_uppercase) {
            errors.push(::lalrpop_util::ParseError::User {
                error: pos::spanned(typ.span, format!("Defining a kind for a type in this location is not supported yet").into()),
            });
            Either::Left(Field::new(
                id.clone(),
                Alias::new(
                    id,
                    Vec::new(),
                    AstType::with_comment(comment, typ),
                ),
            ))
        } else {
            Either::Right(Field::new(
                id,
                AstType::with_comment(comment, typ),
            ))
        }
    },
};

VariantField: (Id, Vec<AstType<Id>>) =
    "|" <CtorIdent> <AtomicType*> => (<>);

VariantType: Type<Id, AstType<Id>> = {
    <rest: (".." <AtomicType>)> => {
        Type::Variant(rest)
    },

    <row: Sp<VariantField+>> <rest: (".." <AtomicType>)?> => {
        let rest = rest.unwrap_or_else(Type::empty_row);
        let row_span = row.span;
        let row = row.value.into_iter()
            .map(|(id, params)| {
                Field::new(id.clone(), Type::tuple(env, params))
            })
            .collect();
        Type::Variant(Type::extend_row(vec![], row, rest))
    }
};

TypeBinding: Box<TypeBinding<Id>> = {
    <metadata: Metadata?> "type" <id: Sp<Ident>> <params: TypeParam*> "=" <row: Sp<VariantType>> => {
        if !env.string(&id.value).starts_with(char::is_uppercase) {
            errors.push(::lalrpop_util::ParseError::User {
                error: pos::spanned(id.span, format!("A type must start with an uppercase letter").into()),
            });
        }

        let row_span = row.span;

        Box::new(TypeBinding {
            metadata: metadata.unwrap_or_default(),
            name: id.clone(),
            alias: pos::spanned(
                row_span,
                AliasData::new(
                    id.value.clone(),
                    params,
                    AstType::from(row),
                )
            ),
            finalized_alias: None,
        })
    },

    <metadata: Metadata?> "type" <id: Sp<Ident>> <params: TypeParam*> "=" <body: Sp<Type>> => {
        if !env.string(&id.value).starts_with(char::is_uppercase) {
            errors.push(::lalrpop_util::ParseError::User {
                error: pos::spanned(id.span, format!("A type must start with an uppercase letter").into()),
            });
        }

        Box::new(TypeBinding {
            metadata: metadata.unwrap_or_default(),
            name: id.clone(),
            alias: pos::spanned(body.span, AliasData::new(id.value.clone(), params, body.value)),
            finalized_alias: None,
        })
    },
};

Effect: Field<Id, AstType<Id>> = {
    <name: Ident> ":" <typ: Type> => Field { <> }
};

AtomicType_: Type<Id, AstType<Id>> = {
    "(" "->" ")" =>
        Type::Builtin(BuiltinType::Function),

    <ids: (<Ident> ".")*> <last: IdentStr> => {
        if ids.is_empty() {
            if last == "_" {
                Type::Hole
            } else {
                match BuiltinType::from_str(last) {
                    Ok(ty) => Type::Builtin(ty),
                    Err(_) if last.starts_with(char::is_uppercase) => {
                        Type::Ident(env.from_str(last))
                    }
                    Err(_) => {
                        Type::Generic(Generic::new(env.from_str(last), type_cache.kind_cache.hole()))
                    }
                }
            }
        } else {
            let ids = ids
                .iter()
                .cloned()
                .chain(Some(env.from_str(last)))
                .collect();
            Type::Projection(ids)
        }
    },


    "(" <VariantType> ")",

    "[" "|" <fields: Sep<Effect, ",">> <rest: ("|" <Type>)?> "|" "]" => {
        let rest = rest.unwrap_or_else(Type::empty_row);
        Type::Effect(Type::extend_row(vec![], fields, rest))
    },

    "(" <elems: Comma<Type>> ")" =>
        match elems.len() {
            // Parenthesized type
            1 => elems.into_iter().next().unwrap().into_inner(),
            _ => Type::tuple_(env, elems),
        },

    "{" <row: Comma<RecordField>> <rest: ("|" <Type>)?> "}" => {
        let (types, fields) = row.into_iter().partition_map(|x| x);
        Type::Record(Type::extend_row(
            types,
            fields,
            rest.unwrap_or_else(Type::empty_row),
        ))
    },
};

AtomicType : AstType<Id> = {
    <typ: Sp<AtomicType_>> => AstType::from(typ),
};

AppType_ = {
    AtomicType_,

    <ty: AtomicType> <args: AtomicType+> =>
        Type::App(ty, args.into_iter().collect()),
};

AppType : AstType<Id> = {
    <typ: Sp<AppType_>> => AstType::from(typ),
};

Type_ = {
    AppType_,
    "forall" <args: Ident+> "." <ty: Type> =>
        Type::Forall(args.into_iter()
                         .map(|id| Generic::new(id, type_cache.kind_cache.hole()))
                         .collect(),
                     ty),

    <lhs: ArgType> <f: Sp<"->">> <rhs: Type> =>
        Type::Function(
            lhs.0,
            lhs.1,
            rhs,
        )
};

Type : AstType<Id> = {
    <typ: Sp<Type_>> => AstType::from(typ),
};

ArgType: (ArgType, AstType<Id>) = {
    <AppType> => (ArgType::Explicit, <>),
    <l: @L> "[" <typ: Type_> "]" <r: @R> =>
        (ArgType::Implicit, AstType::from(pos::spanned2(l, r, typ))),
};

// Patterns

FieldPattern : FieldPattern<Id> = {
    <id: Sp<Ident>> "=" <body: Sp<Pattern>> =>
        FieldPattern::Value(id, Some(body)),

    <Sp<IdentStr>> => {
        let id = pos::spanned(<>.span, env.from_str(<>.value));
        if <>.value.starts_with(char::is_uppercase) {
            FieldPattern::Type(id, None)
        } else {
            FieldPattern::Value(id, None)
        }
    },
};

AtomicPattern: Pattern<Id> = {
    <l: @L> <id: Ident> <r: @R> "@" <pat: Sp<AtomicPattern>> =>
        Pattern::As(pos::spanned2(l, r, id), Box::new(pat)),

    <id: Ident> =>
        if env.string(&id).starts_with(char::is_uppercase) {
            Pattern::Constructor(new_ident(type_cache, id), Vec::new())
        } else {
            Pattern::Ident(new_ident(type_cache, id))
        },

    <l: Literal> =>
        Pattern::Literal(l),

    "(" <elems: Comma<Sp<Pattern>>> ")" =>
        match elems.len() {
            // Parenthesized pattern
            1 => elems.into_iter().next().unwrap().value,
            _ => Pattern::Tuple { typ: type_cache.hole(), elems: elems },
        },

    "{" <fields: Comma<FieldPattern>> <implicit_import: Sp<"?"?>> "}" => {
        let mut types_len = 0;
        let mut values_len = 0;
        for field in &fields {
            match field {
                FieldPattern::Type(..) => types_len += 1,
                FieldPattern::Value(..) => values_len += 1,
            }
        }

        let mut types = Vec::with_capacity(types_len);
        let mut values = Vec::with_capacity(values_len);

        for field in fields {
            match field {
                FieldPattern::Type(id, typ) => types.push(PatternField {
                    name: id,
                    value: typ
                }),
                FieldPattern::Value(id, field) => values.push(PatternField {
                    name: id,
                    value: field
                }),
            }
        }

        let implicit_import_span = implicit_import.span;

        Pattern::Record {
            typ: type_cache.hole(),
            types: types,
            fields: values,
            implicit_import: implicit_import
                .value
                .map(|_| pos::spanned(implicit_import_span, env.from_str(&format!("implicit?{}", implicit_import_span.start())))),
        }
    },
};

NoErrorPattern = {
    AtomicPattern,

    <id: Ident> <args: Sp<AtomicPattern>+> => {
        let id = new_ident(type_cache, id);

        Pattern::Constructor(id, args)
    },
};

Pattern = {
    NoErrorPattern,
    <!> => {
        debug!("Recovering from pattern error");
        errors.push(<>.error);
        Pattern::Error
    },
};

// Expressions

Literal: Literal = {
    "string literal" => Literal::String(<>),
    "char literal" => Literal::Char(<>),
    "int literal" => Literal::Int(<>),
    "byte literal" => Literal::Byte(<>),
    "float literal" => Literal::Float(NotNan::new(<>).unwrap()),
};

Alternative: Alternative<Id> = {
    "|" <pat: Sp<Pattern>> "->" <expr: Sp<BlockExpr>> => {
        Alternative {
            pattern: pat,
            expr: super::shrink_hidden_spans(expr),
        }
    },
    "|" <pat: Sp<NoErrorPattern>> <err: !> <end: @R>  => {
        errors.push(err.error);
        let span = pos::Span::new(pat.span.end(), end);
        Alternative {
            pattern: pat,
            expr: pos::spanned(span, Expr::Error(None)),
        }
    },
    "|" <start: @R> <err: !> <end: @R>  => {
        errors.push(err.error);
        let span = pos::Span::new(start, end);
        Alternative {
            pattern: pos::spanned(span, Pattern::Error),
            expr: pos::spanned(span, Expr::Error(None)),
        }
    },
};

FieldExpr: Box<FieldExpr<Id>> = {
    <metadata: Metadata?> <id: Sp<Ident>> "=" <body: SpExpr> => {
        Box::new(FieldExpr::Value(metadata.unwrap_or_default(), id, Some(body)))
    },

    <metadata: Metadata?> <id_str: Sp<IdentStr>> => {
        let metadata = metadata.unwrap_or_default();
        let id = pos::spanned(id_str.span, env.from_str(id_str.value));
        Box::new(if id_str.value.starts_with(char::is_uppercase) {
            FieldExpr::Type(metadata, id, None)
        } else {
            FieldExpr::Value(metadata, id, None)
        })
    },
};

ValueArgument: Argument<SpannedIdent<Id>> = {
    <arg_type: "?"?> <name: SpannedIdent> => {
        Argument {
            arg_type: if arg_type.is_some() {
                ArgType::Implicit
            } else {
                ArgType::Explicit
            },
            name,
        }
    }
};

ValueBinding: Box<ValueBinding<Id>> = {
    <metadata: Metadata?> <bind: PlainValueBinding> => {
        let mut bind = bind;
        bind.metadata = metadata.unwrap_or_default();
        bind
    }
};

PlainValueBinding: Box<ValueBinding<Id>> = {
    "let" <name: Sp<AtomicPattern>> <typ: (":" <Type>)?> "=" <expr: SpExpr> => {
        Box::new(ValueBinding {
            metadata: Metadata::default(),
            name,
            typ,
            resolved_type: type_cache.hole(),
            args: vec![],
            expr,
        })
    },

    "let" <name: Sp<Ident>> <args: ValueArgument+> <typ: (":" <Type>)?> "=" <expr: SpExpr> =>
        Box::new(ValueBinding {
            metadata: Metadata::default(),
            name: name.map(|name| new_ident(type_cache, name)).map(Pattern::Ident),
            typ,
            resolved_type: type_cache.hole(),
            args,
            expr,
        }),

    // Error recovery

    "let" <name: Sp<Ident>> => {
        let span = pos::Span::new(name.span.end(), name.span.end());
        errors.push(::lalrpop_util::ParseError::UnrecognizedToken {
            token: Some((span.start(), Token::In, span.end())),
            expected: ["=", ":"].iter().map(|s| s.to_string()).collect(),
        });
        Box::new(ValueBinding {
            metadata: Metadata::default(),
            name: name.map(|name| new_ident(type_cache, name)).map(Pattern::Ident),
            typ: None,
            resolved_type: type_cache.hole(),
            args: Vec::new(),
            expr: pos::spanned(span, Expr::Error(None)),
        })
    }
};

RecursiveValueBinding: Box<ValueBinding<Id>> = {
    <metadata: Metadata?> "let" <name: Sp<Ident>> <args: ValueArgument*> <typ: (":" <Type>)?> "=" <expr: SpExpr> =>
        Box::new(ValueBinding {
            metadata: metadata.unwrap_or_default(),
            name: name.map(|name| new_ident(type_cache, name)).map(Pattern::Ident),
            typ,
            resolved_type: type_cache.hole(),
            args,
            expr,
        }),
};

RecordExprBase: Option<SpannedExpr<Id>> = {
    ".." <SpExpr> => Some(<>),
    => None
};

AtomicExpr: Expr<Id> = {
    <id: Ident> =>
        Expr::Ident(new_ident(type_cache, id)),

    <lit: Literal> =>
        Expr::Literal(lit),

    // TODO: Getters
    // "(" "." <id: Ident> ")" =>
    //     Expr::Getter(id),

    <expr: SpAtomicExpr> "." <id: Ident> =>
        Expr::Projection(Box::new(expr), id, type_cache.hole()),

    <expr: SpAtomicExpr> "." <err: !> => {
        errors.push(err.error);
        Expr::Projection(Box::new(expr), env.from_str(""), type_cache.hole())
    },

    "(" <elems: Comma<SpExpr>> ")" =>
        Expr::Tuple { typ: type_cache.hole(), elems: elems },

    "[" <elems: Comma<SpExpr>> "]" => Expr::Array(Array {
            typ: type_cache.hole(),
            exprs: elems,
        }),

    "{" <fields: Comma<FieldExpr>> <base: RecordExprBase> "}" => {
        let mut types_len = 0;
        let mut values_len = 0;
        for field in &fields {
            match **field {
                FieldExpr::Type(..) => types_len += 1,
                FieldExpr::Value(..) => values_len += 1,
            }
        }

        let mut types = Vec::with_capacity(types_len);
        let mut values = Vec::with_capacity(values_len);

        for field in fields {
            match *field {
                FieldExpr::Type(metadata, id, typ) => types.push(ExprField {
                    metadata,
                    name: id,
                    value: typ
                }),
                FieldExpr::Value(metadata, id, expr) => values.push(ExprField {
                    metadata,
                    name: id,
                    value: expr
                }),
            }
        }

        Expr::Record {
            typ: type_cache.hole(),
            types: types,
            exprs: values,
            base: base.map(Box::new),
        }
    },
};

SpAtomicExpr: SpannedExpr<Id> = {
    <Sp<AtomicExpr>> => super::shrink_hidden_spans(<>)
};

ImplicitArg: SpannedExpr<Id> = {
    "?" <arg: Sp<AtomicExpr>> => arg
};

AppExpr = {
    AtomicExpr,

    <expr: SpAtomicExpr> <implicit_args: ImplicitArg+> =>
        Expr::App { func: Box::new(expr), implicit_args, args: Vec::new() },

    <expr: SpAtomicExpr> <implicit_args: ImplicitArg*> <args: SpAtomicExpr+> =>
        Expr::App { func: Box::new(expr), implicit_args, args },
};


LambdaArgument: Argument<SpannedIdent<Id>> = {
    <name: SpannedIdent> => {
        Argument::explicit(name)
    }
};

InfixExpr = {
    AppExpr,

    "\\" <args: LambdaArgument+> "->" <body: SpExpr> =>
        Expr::Lambda(Lambda {
            id: new_ident(type_cache, env.from_str("")),
            args,
            body: Box::new(body),
        }),

    <lhs: Sp<AppExpr>> <op: Sp<Operator>> <rhs: Sp<InfixExpr>> =>
        Expr::Infix { lhs: Box::new(lhs), op, rhs: Box::new(super::shrink_hidden_spans(rhs)), implicit_args: Vec::new(), },
};


InExpr: SpannedExpr<Id> = {
    "in" <SpExpr>,
    <err: Sp<!>> => {
        errors.push(err.value.error);
        pos::spanned(err.span, Expr::Error(None))
    }
};

Expr: Expr<Id> = {
    InfixExpr,

    "if" <pred: SpExpr> "then" <if_true: SpExpr> "else" <if_false: SpExpr> =>
        Expr::IfElse(Box::new(pred), Box::new(if_true), Box::new(if_false)),

    "match" <body: SpExpr> "with" <arms: Alternative+> =>
        Expr::Match(Box::new(body), arms),

    <binding: ValueBinding> <body: InExpr> => {
        Expr::LetBindings(ValueBindings::Plain(binding), Box::new(body))
    },

    <binding: TypeBinding> <body: InExpr> => {
        Expr::TypeBindings(vec![*binding], Box::new(body))
    },

    <metadata: Metadata?> "rec" <bindings: RecursiveValueBinding+> <body: InExpr> => {
        let mut bindings = bindings.into_iter().map(|x| *x).collect::<Vec<_>>();;
        if let Some(metadata) = metadata {
            bindings[0].metadata = metadata;
        }
        Expr::LetBindings(ValueBindings::Recursive(bindings), Box::new(body))
    },

    <metadata: Metadata?> "rec" <bindings: TypeBinding+> <body: InExpr> => {
        let mut bindings = bindings.into_iter().map(|x| *x).collect::<Vec<_>>();;
        if let Some(metadata) = metadata {
            bindings[0].metadata = metadata;
        }
        Expr::TypeBindings(bindings, Box::new(body))
    },

    DoExpression,

    BlockExpr,

    ! => {
        errors.push(<>.error);
        Expr::Error(None)
    }
};

DoExpression: Expr<Id> = {
    "do" <bind: DoBinding> <body: SpExpr> => {
        let bind = *bind;
        Expr::Do(Do { id: Some(bind.0), bound: Box::new(bind.1), body: Box::new(body), flat_map_id: None })
    },

    "seq" <bound: SpExpr> <body: InExpr> => {
        Expr::Do(Do { id: None, bound: Box::new(bound), body: Box::new(body), flat_map_id: None })
    },
};


DoBinding: Box<(SpannedPattern<Id>, SpannedExpr<Id>)> = {
    <id: Sp<Pattern>> "=" <bound: SpExpr> "in" => Box::new((id, bound)),

    // Error recovery

    <id: Sp<Pattern>> "in" => {
        let span = pos::Span::new(id.span.end(), id.span.end());
        errors.push(::lalrpop_util::ParseError::UnrecognizedToken {
            token: Some((span.start(), Token::In, span.end())),
            expected: ["="].iter().map(|s| s.to_string()).collect(),
        });
        Box::new((id, pos::spanned(span, Expr::Error(None))))
    },
};

BlockExpr: Expr<Id> = {
    "block open" <exprs: (<SpExpr> "block separator")*> <last: SpExpr> "block close" => {
        let mut exprs = exprs;
        exprs.push(last);
        Expr::Block(exprs)
    },
};

SpExpr: SpannedExpr<Id> = {
    <expr: Sp<Expr>> => super::shrink_hidden_spans(expr),
};

pub TopExpr: SpannedExpr<Id> = {
    "shebang line"? <expr: SpExpr> SkipExtraTokens => expr,
};

pub ReplLine: Option<Box<ReplLine<Id>>> = {
    <TopExpr> => Some(Box::new(ReplLine::Expr(<>))),
    "block open" <PlainValueBinding> "block close" => Some(Box::new(ReplLine::Let(*<>))),
    => None,
};

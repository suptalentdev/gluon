//@NO-IMPLICIT-PRELUDE
let { Applicative } = import! std.applicative

/// A monoid on applicative functors.
#[implicit]
type Alternative f = {
    applicative : Applicative f,
    or : forall a . f a -> f a -> f a,
    empty : forall a . f a
}

let empty ?alt : [Alternative f] -> f a = alt.empty

let or ?alt : [Alternative f] -> f a -> f a -> f a = alt.or

/// Alias of `or`
#[infix(left, 3)]
let (<|>) : [Alternative f] -> f a -> f a -> f a = or

{
    Alternative,
    empty, or, (<|>),
}

//@NO-IMPLICIT-PRELUDE

let { Functor } = import! std.functor

/// @implicit
type Applicative (f : Type -> Type) = {
    functor : Functor f,
    /// Like `functor.map`, but this time the supplied function is embedded in `f`
    ///
    /// # Note
    ///
    /// * Known as `(<*>)` in Haskell
    apply : forall a b . f (a -> b) -> f a -> f b,
    /// Wrap the supplied value in `f`
    ///
    /// # Examples
    ///
    /// * `option.applicative.wrap 1 == Some 1`
    /// * `result.applicative.wrap 1 == Ok 1`
    /// * `list.applicative.wrap 1 == list.of [1]`
    ///
    /// # Note
    ///
    /// * Known as `pure` in Haskell
    wrap : forall a . a -> f a
}

let wrap ?app : [Applicative f] -> a -> f a = app.wrap
let apply ?app : [Applicative f] -> f (a -> b) -> f a -> f b = app.apply
let (<*>) ?app : [Applicative f] -> f (a -> b) -> f a -> f b = app.apply
let (<*) ?app l r : [Applicative f] -> f a -> f b -> f a = app.functor.map (\x _ -> x) l <*> r
let (*>) ?app l r : [Applicative f] -> f a -> f b -> f b = app.functor.map (\_ x -> x) l <*> r

let map2 ?app f a b : [Applicative f] -> (a -> b -> c)
        -> f a
        -> f b
        -> f c
    = (app.functor.map f a) <*> b
let map3 ?app f a b c : [Applicative f] -> (a -> b -> c -> d) -> f a -> f b -> f c -> f d =
    (app.functor.map f a) <*> b <*> c

/// @implicit
type Alternative f = {
    applicative : Applicative f,
    or : forall a . f a -> f a -> f a,
    empty : forall a . f a
}

let empty ?alt : [Alternative f] -> f a = alt.empty
let or ?alt : [Alternative f] -> f a -> f a -> f a = alt.or
let (<|>) ?alt : [Alternative f] -> f a -> f a -> f a = alt.or


{
    Applicative,
    apply, wrap, (<*>), (<*), (*>), map2, map3,

    Alternative,
    empty, or, (<|>),
}

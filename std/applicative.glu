//@NO-IMPLICIT-PRELUDE
//! Implementation of the `Applicative` type

let { Functor, map } = import! std.functor

/// A `Functor` with application.
///
/// The following laws should hold:
///
/// * wrap id <*> v = v
/// * wrap (<<) <*> u <*> v <*> w = u <*> (v <*> w)
/// * wrap f <*> wrap x = wrap (f x)
/// * u <*> wrap y = wrap (\g -> g x) <*> u
#[implicit]
type Applicative (f : Type -> Type) = {
    functor : Functor f,
    /// Like `functor.map`, but this time the supplied function is embedded in `f`
    ///
    /// # Note
    ///
    /// * Known as `(<*>)` in Haskell
    apply : forall a b . f (a -> b) -> f a -> f b,
    /// Wrap the supplied value in `f`
    ///
    /// # Examples
    ///
    /// * `option.applicative.wrap 1 == Some 1`
    /// * `result.applicative.wrap 1 == Ok 1`
    /// * `list.applicative.wrap 1 == list.of [1]`
    ///
    /// # Note
    ///
    /// * Known as `pure` in Haskell
    wrap : forall a . a -> f a
}

let wrap ?app : [Applicative f] -> a -> f a = app.wrap
let apply ?app : [Applicative f] -> f (a -> b) -> f a -> f b = app.apply

/// Alias of `<*>`
#[infix(left, 4)]
let (<*>) : [Applicative f] -> f (a -> b) -> f a -> f b = apply

/// Sequence actions, discargin the value of the second argument
#[infix(left, 4)]
let (<*) l r : [Applicative f] -> f a -> f b -> f a = map (\x _ -> x) l <*> r

/// Sequence actions, discargin the value of the first argument
#[infix(left, 4)]
let (*>) l r : [Applicative f] -> f a -> f b -> f b = map (\_ x -> x) l <*> r

/// Maps over two actions
let map2 f a b : [Applicative f] -> (a -> b -> c)
        -> f a
        -> f b
        -> f c
    = map f a <*> b

/// Maps over three actions
let map3 f a b c : [Applicative f] -> (a -> b -> c -> d) -> f a -> f b -> f c -> f d =
    map f a <*> b <*> c

/// A monoid on applicative functors.
#[implicit]
type Alternative f = {
    applicative : Applicative f,
    or : forall a . f a -> f a -> f a,
    empty : forall a . f a
}

let empty ?alt : [Alternative f] -> f a = alt.empty

let or ?alt : [Alternative f] -> f a -> f a -> f a = alt.or

/// Alias of `or`
#[infix(left, 3)]
let (<|>) : [Alternative f] -> f a -> f a -> f a = or


{
    Applicative,
    apply, wrap, (<*>), (<*), (*>), map2, map3,

    Alternative,
    empty, or, (<|>),
}

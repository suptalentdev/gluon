let prelude = import! "std/prelude.glu"
and { Functor, Applicative } = prelude
let int = import! "std/int.glu"
and { (+) } = int.num
let list = import! "std/list.glu"
let { Bool } = import! "std/bool.glu"
let { List } = list
let { Option } = import! "std/option.glu"
let { lazy, force } = import! "lazy"

type Stream_ a = | Value a (Stream a) | Empty
and Stream a = Lazy (Stream_ a)

let from f : (Int -> Option a) -> Stream a =
    let go i = lazy (\_ ->
            match f i with
            | Some x -> Value x (go (i + 1))
            | None -> Empty)
    go 0

let repeat x : a -> Stream a =
    lazy (\_ -> Value x (repeat x))

let next stream : Stream a -> Option a =
    match force stream with
    | Value x _ -> Some x
    | Empty -> None

let is_empty stream : Stream a -> Bool =
    match force stream with
    | Value _ _ -> False
    | Empty -> True

let fold f b stream : (a -> b -> b) -> b -> Stream a -> b =
    match force stream with
    | Value x xs -> fold f (f x b) xs
    | Empty -> b

let to_list : Stream a -> List a =
    fold Cons Nil

let zip_with f xs ys : (a -> b -> c) -> Stream a -> Stream b -> Stream c =
    lazy (\_ ->
        match (force xs, force ys) with
        | (Value x rest_xs, Value y rest_ys) -> Value (f x y) (zip_with f rest_xs rest_ys)
        | (_, _) -> Empty)

let functor : Functor Stream =
    let map f xs : (a -> b) -> Stream a -> Stream b =
        lazy (\_ ->
            match force xs with
            | Value x rest_xs -> Value (f x) (map f rest_xs)
            | Empty -> Empty)

    { map }

{
    from,
    repeat,
    next,
    is_empty,
    fold,
    to_list,
    zip_with,
    functor,
}

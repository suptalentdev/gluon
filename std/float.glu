let { Semigroup, Monoid, Group, Eq, Ord, Ordering, Num, Show } = import! "std/prelude.glu"

let additive =
    let semigroup : Semigroup Float = { append = \x y -> x #Float+ y }

    let monoid : Monoid Float = {
        semigroup = semigroup,
        empty = 0.0
    }

    let group : Group Float = {
        monoid = monoid,
        inverse = \x -> 0.0 #Float- x
    }

    { semigroup, monoid, group }

let multiplicative =
    let semigroup : Semigroup Float = { append = \x y -> x #Float* y }

    let monoid : Monoid Float = {
        semigroup = semigroup,
        empty = 1.0
    }

    let group : Group Float = {
        monoid = monoid,
        inverse = \x -> 1.0 #Float/ x
    }

    { semigroup, monoid, group }

let eq : Eq Float = {
    (==) = \l r -> l #Float== r
}

let ord : Ord Float = {
    eq = eq,
    compare = \l r -> if l #Float< r then LT else if l #Float== r then EQ else GT
}

let num : Num Float = {
    ord = ord,
    (+) = additive.semigroup.append,
    (-) = \l r -> l #Float- r,
    (*) = multiplicative.semigroup.append,
    (/) = \l r -> l #Float/ r,
    negate = additive.group.inverse
}

let show : Show Float = {
    show = prim.show_float
}

{
    additive,
    multiplicative,
    eq,
    ord,
    num,
    show,

    digits = float_prim.digits,
    epsilon = float_prim.epsilon,
    infinity = float_prim.infinity,
    mantissa_digits = float_prim.mantissa_digits,
    max_ = float_prim.max_,
    max_10_exp = float_prim.max_10_exp,
    max_exp = float_prim.max_exp,
    min_ = float_prim.min_,
    min_10_exp = float_prim.min_10_exp,
    min_exp = float_prim.min_exp,
    min_positive = float_prim.min_positive,
    nan = float_prim.nan,
    neg_infinity = float_prim.neg_infinity,
    e = float_prim.e,
    pi = float_prim.pi,
    radix = float_prim.radix,
    is_nan = float_prim.is_nan,
    is_infinite = float_prim.is_infinite,
    is_finite = float_prim.is_finite,
    is_normal = float_prim.is_normal,
    floor = float_prim.floor,
    ceil = float_prim.ceil,
    round = float_prim.round,
    trunc = float_prim.trunc,
    fract = float_prim.fract,
    abs = float_prim.abs,
    signum = float_prim.signum,
    is_sign_positive = float_prim.is_sign_positive,
    is_sign_negative = float_prim.is_sign_negative,
    mul_add = float_prim.mul_add,
    recip = float_prim.recip,
    powi = float_prim.powi,
    powf = float_prim.powf,
    sqrt = float_prim.sqrt,
    exp = float_prim.exp,
    exp2 = float_prim.exp2,
    ln = float_prim.ln,
    log2 = float_prim.log2,
    log10 = float_prim.log10,
    to_degrees = float_prim.to_degrees,
    to_radians = float_prim.to_radians,
    max = float_prim.max,
    min = float_prim.min,
    cbrt = float_prim.cbrt,
    hypot = float_prim.hypot,
    sin = float_prim.sin,
    cos = float_prim.cos,
    tan = float_prim.tan,
    acos = float_prim.acos,
    atan = float_prim.atan,
    atan2 = float_prim.atan2,
    sin_cos = float_prim.sin_cos,
    exp_m1 = float_prim.exp_m1,
    ln_1p = float_prim.ln_1p,
    sinh = float_prim.sinh,
    cosh = float_prim.cosh,
    tanh = float_prim.tanh,
    acosh = float_prim.acosh,
    atanh = float_prim.atanh,
    parse = float_prim.parse
}

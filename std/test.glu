let string = import! "std/string.glu"
and { Writer, make = make_Writer, tell } = import! "std/writer.glu"
and prelude = import! "std/prelude.glu"
and { Show, Num, Eq, Applicative, Monad, Monoid } = prelude
let float = import! "std/float.glu"
let int = import! "std/int.glu"
and { (+) } = int.num
and { (==) } = int.eq
and { (<) } = prelude.make_Ord int.ord
let list = import! "std/list.glu"
let { List } = list
and { foldl } = list.foldable
let { Option } = import! "std/option.glu"

let (++) = string.semigroup.append

type Test a = Writer (List String) a

let writer = make_Writer list.monoid
let { wrap } = writer.applicative

let assert x = if x then () else error "Assertion failed"
and assert_eq show eq = \x y ->
    if eq.(==) x y
    then wrap ()
    else tell (Cons ("Assertion failed: " ++ show.show x ++ " != " ++ show.show y) Nil)

let assert_ieq = assert_eq int.show int.eq
and assert_feq = assert_eq float.show float.eq
and assert_seq = assert_eq string.show string.eq

let run test : Test a -> () =
    match test.writer with
    | Cons _ _ -> error (foldl (\acc err -> acc ++ "\n" ++ err) "" test.writer)
    | Nil -> ()

{ Test, writer, assert, assert_eq, assert_ieq, assert_feq, assert_seq, run }

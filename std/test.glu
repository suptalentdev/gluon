let string = import! std.string
let { append = (++) } = string.semigroup
let writer @ { Writer, ? } = import! std.writer
let prelude @ { Show, Num, Eq, Applicative, Monad, Monoid } = import! std.prelude
let float = import! std.float
let int = import! std.int
let list @ { List } = import! std.list
let { foldl } = list.foldable
let { Option } = import! std.option

type Test a = Writer (List String) a
type TestCase a = | Test String (Test a) | Group String (Array (TestCase a))

let testWriter = writer.make list.monoid

let test = Test
let group = Group

let assert x = if x then () else error "Assertion failed"

let assert_eq l r : [Show a] -> [Eq a] -> a -> a -> Test () =
    if l == r
    then testWriter.applicative.wrap ()
    else writer.tell (Cons ("Assertion failed: " ++ show l ++ " != " ++ show r) Nil)

let run test : Test a -> () =
    match test.writer with
    | Cons _ _ -> error (foldl (\acc err -> acc ++ "\n" ++ err) "" test.writer)
    | Nil -> ()

{
    Test,
    TestCase,

    writer = testWriter,
    functor = testWriter.functor,
    applicative = testWriter.applicative,
    monad = testWriter.monad,

    test,
    group,

    assert,
    assert_eq,

    run,
}

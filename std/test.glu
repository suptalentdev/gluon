let string @ { semigroup = { append = (++) } } = import! std.string
let writer @ { Writer } = import! std.writer
let prelude @ { Show, Num, Eq, Applicative, Monad, Monoid } = import! std.prelude
let float = import! std.float
let int @ { num = { (+) }, eq = { (==) } } = import! std.int
let { (<) } = prelude.make_Ord int.ord
let list @ { List, foldable = { foldl } } = import! std.list
let { Option } = import! std.option

type Test a = Writer (List String) a

let testWriter @ { applicative = { wrap } } = writer.make list.monoid

let assert x = if x then () else error "Assertion failed"
and assert_eq show eq = \x y ->
    if eq.(==) x y
    then wrap ()
    else writer.tell (Cons ("Assertion failed: " ++ show.show x ++ " != " ++ show.show y) Nil)

let assert_ieq = assert_eq int.show int.eq
and assert_feq = assert_eq float.show float.eq
and assert_seq = assert_eq string.show string.eq

let run test : Test a -> () =
    match test.writer with
    | Cons _ _ -> error (foldl (\acc err -> acc ++ "\n" ++ err) "" test.writer)
    | Nil -> ()

{ Test, writer = testWriter, assert, assert_eq, assert_ieq, assert_feq, assert_seq, run }

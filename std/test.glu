//! A simple test library.

let string = import! std.string
let { wrap } = import! std.applicative
let prelude @ { Semigroup } = import! std.prelude
let float = import! std.float
let int = import! std.int
let list @ { List, ? } = import! std.list
let { Foldable, foldl } = import! std.foldable
let { Option } = import! std.option
let { (<>) } = import! std.semigroup
let { error } = import! std.prim
let { id } = import! std.function
let { ? } = import! std.io

let { assert } = import! std.assert

let effect @ { Eff, ? } = import! std.effect
let { Writer, run_writer, tell } = import! std.effect.writer
let { Lift, run_lift } = import! std.effect.lift


type Test a = Writer (List String) a
type TestEff r a = Eff [| writer : Test | r |] a
type TestEffIO r a = Eff [| writer : Test, lift : Lift IO | r |] a
type TestCase r a =
    | Test String (() -> Eff [| writer : Test | r |] a)
    | Group String (Array (TestCase r a))

let test = Test
let group = Group

let assert_eq l r : [Show a] -> [Eq a] -> a -> a -> Eff [| writer : Test | r |] () =
    if l == r then wrap ()
    else tell (Cons ("Assertion failed: " <> show l <> " != " <> show r) Nil)

let assert_neq l r : [Show a] -> [Eq a] -> a -> a -> Eff [| writer : Test | r |] () =
    if l /= r then wrap ()
    else tell (Cons ("Assertion failed: " <> show l <> " == " <> show r) Nil)

rec let run_raw test : Eff [| writer : Test | r |] a -> Eff [| | r |] (List String) =
    do test = run_writer test
    wrap test.writer
in
rec let run test : Eff [| writer : Test | r |] a -> Eff [| | r |] () =
    do writer = run_raw test
    match writer with
    | Cons _ _ -> error (foldl (\acc err -> acc <> "\n" <> err) "" writer)
    | Nil -> wrap ()
in
rec let run_io test : TestEffIO r a -> IO () =
    run_lift (run test)
in

{
    Test,
    TestEff,
    TestEffIO,
    TestCase,

    test,
    group,

    assert,
    assert_eq,
    assert_neq,

    run_raw,
    run,
    run_io,
}

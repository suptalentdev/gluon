let { Functor, Applicative, Monad } = import! "std/prelude.glu"

let functor : Functor IO = {
    map = \f -> io_flat_map (\x -> io_wrap (f x))
}

let applicative : Applicative IO =
    let wrap = io_wrap
    let apply f x = io_flat_map (\g -> io_flat_map (\y -> wrap (g y)) x) f

    { functor, apply, wrap }

let monad : Monad IO = {
    applicative = applicative,
    flat_map = io_flat_map,
}

{
    functor,
    applicative,
    monad,
    ..
    io_prim
}

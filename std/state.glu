let { Monad } = import "std/prelude.glu"

type State s a = s -> { value: a, state: s }

let (>>=) m f: State s a -> (a -> State s b) -> State s b =
    \state ->
        let { value, state } = m state
        and m2 = f value
        m2 state

let return value: a -> State s a = \state -> { value, state }

let monad: Monad (State s) = { (>>=), return }

let put value: s -> State s () = \state -> { value = (), state = value }

let get: State s s = \state -> { value = state, state }

let gets f: (s -> a) -> State s a = \state -> { value = f state, state }

let modify f: (s -> s) -> State s () = \state -> { value = (), state = f state }

let runState f state: State s a -> s -> { value: a, state: a } = f state

let evalState f state: State s a -> s -> a = (runState f state).value

let execState f state: State s a -> s -> s = (runState f state).state

{ State, monad, put, get, modify, runState, evalState, execState }

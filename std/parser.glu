let prelude = import! "std/prelude.glu"
let { Functor, Applicative, Alternative, Monad, List, id, make_Monoid, show_Char = show } = prelude
let string = import! "std/string.glu"
let { (<>) } = make_Monoid string.monoid

type OffsetString = { start: Int, end: Int, buffer: String }
type Position = Int
type Error = String
type ParseResult a = Result Error { value: a, buffer: OffsetString }
type Parser a =
    OffsetString -> ParseResult a

let parser: Parser a -> Parser a = id

let functor : Functor Parser = {
    map = \f m -> parser (\buffer ->
        let result = parser m buffer
        match result with
        | Ok a -> Ok { value = f a.value, buffer = a.buffer }
        | Err err -> Err err)
}

let { map } = functor

let applicative : Applicative Parser = {
    functor,

    apply = \f m -> parser (\buffer ->
        let result1 = parser f buffer
        match result1 with
        | Ok g ->
            let result2 = parser m g.buffer
            match result2 with
            | Ok a -> Ok { value = g.value a.value, buffer = a.buffer }
            | Err err -> Err err
        | Err err -> Err err),

    wrap = \value -> parser (\buffer -> Ok { value, buffer })
}

let { (*>), (<*), wrap } = prelude.make_Applicative applicative

let alternative: Alternative Parser = {
    applicative,

    or = \l r -> parser (\stream ->
        match parser l stream with
        | Ok a -> Ok a
        | Err _ -> parser r stream),
    empty = parser (\stream -> Err "empty")
}

let { (<|>) } = prelude.make_Alternative alternative

let monad : Monad Parser = {
    applicative,

    flat_map = \f m -> parser (\buffer ->
        match parser m buffer with
        | Ok a -> parser (f a.value) a.buffer
        | Err err -> Err err)
}

let { (>>=), flat_map } = prelude.make_Monad monad

let uncons stream : OffsetString -> Option { char: Char, rest: OffsetString } =
    if stream.start == stream.end then
        None
    else
        let c = string.char_at stream.buffer stream.start
        let char_len = char.len_utf8 c
        Some {
            char = c,
            rest = {
                start = stream.start + char_len,
                end = stream.end,
                buffer = stream.buffer,
            }
        }

let update_position c position: Char -> Position -> Position =
    position + char.len_utf8 c

let any: Parser Char =
    parser (\stream ->
        match uncons stream with
        | Some record ->
            let { char, rest } = record
            Ok { value = char, buffer = rest }
        | None -> Err "End of stream")

let fail message: String -> Parser a =
    parser (\stream -> Err message)

let satisfy predicate: (Char -> Bool) -> Parser Char =
    let f c =
        if predicate c then
            wrap c
        else
            fail ("Unexpected character " <> show.show c)
    flat_map f any

let token expected: Char -> Parser Char =
    satisfy (\c -> expected == c)

let take1 predicate : (Char -> Bool) -> Parser String =
    parser (\stream ->
        let take_ stream2 =
            match uncons stream2 with
            | Some record ->
                if predicate record.char then
                    take_ record.rest
                else if stream.start == stream2.start then
                    Err "Unexpected token"
                else
                    Ok {
                        value = string.slice stream.buffer stream.start stream2.start,
                        buffer = stream2
                    }
            | None -> Ok {
                    value = string.slice stream.buffer stream.start stream.end,
                    buffer = stream2
                }
        take_ stream
        )

let take predicate : (Char -> Bool) -> Parser String =
    take1 predicate <|> wrap ""

let take_string p : Parser a -> Parser String =
    parser (\stream ->
        match parser p stream with
        | Ok a ->
            Ok {
                value = string.slice stream.buffer stream.start a.buffer.start,
                buffer = a.buffer
            }
        | Err err -> Err err)

let spaces = take char.is_whitespace

let lazy_parser f : (() -> Parser a) -> Parser a =
    parser (\stream -> f () stream)

let between l r x: Parser a -> Parser b -> Parser c -> Parser c =
    l *> x <* r

let many p : Parser a -> Parser (List a) =
    many1 p <|> wrap Nil

and many1 p : Parser a -> Parser (List a) =
    p >>= (\h -> map (\t -> Cons h t) (many p))

let skip_many p : Parser a -> Parser () =
    skip_many1 p <|> wrap ()
and skip_many1 p : Parser a -> Parser () =
    p >>= (\_ -> skip_many p)

let one_of s : String -> Parser Char =
    satisfy (\first ->
        let len = string.len s
        let one_of_ i =
            if i == len then
                False
            else
                let c = string.char_at s i
                if first == c then
                    True
                else
                    one_of_ (i + char.len_utf8 c)
        one_of_ 0) <|> fail ("Expected one of `" <> s <> "`")

let parse p input: Parser a -> String -> Result String a =
    match p { start = 0, end = string.len input, buffer = input } with
    | Ok ok -> Ok ok.value
    | Err err -> Err err

{
    Position, Error, ParseResult, Parser,

    functor, applicative, alternative, monad,

    parser,

    any, between, token, many, many1, satisfy, spaces, take1, lazy_parser, fail, take_string,
    skip_many, skip_many1, one_of,

    parse
}

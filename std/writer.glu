let prelude = import! std.prelude
let { Applicative, Functor, Monad, Monoid } = prelude

type Writer w a = { value : a, writer : w }

type Impl w = {
    functor : Functor (Writer w),
    applicative : Applicative (Writer w),
    monad : Monad (Writer w)
}

let make monoid : Monoid w -> Impl w =
    let { (<>) } = import! std.prelude

    let functor : Functor (Writer w) = { map = \f m -> { value = f m.value, writer = m.writer } }

    let applicative : Applicative (Writer w) = {
        functor,
        apply = \mf m -> { value = mf.value m.value, writer = mf.writer <> m.writer },
        wrap = \value -> { value, writer = monoid.empty },
    }

    let monad : Monad (Writer w) = {
        applicative,
        flat_map = \f m ->
            let { value, writer } = f m.value
            { value, writer = m.writer <> writer },
    }

    { functor, applicative, monad }

let tell w : w -> Writer w () = { value = (), writer = w }

{ Writer, Impl, make, tell }

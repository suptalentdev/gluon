let { Applicative, Functor, Monad, Monoid } = import "std/prelude.glu"

type Writer w a = { value: a, writer: w }

let make_Functor w: Monoid w -> Functor (Writer w) =
    let { (<>) } = w

    let map f m : (a -> b) -> Writer w a -> Writer w b =
        { value = f m.value, writer = m.writer  }

    { map }

let make_Applicative w: Monoid w -> Applicative (Writer w) =
    let { (<>) } = w

    let apply mf m : Writer w (a -> b) -> Writer w a -> Writer w b =
        { value = mf.value m.value, writer = mf.writer <> m.writer }
    let pure value: a -> Writer w a =
        { value, writer = w.empty }

    { apply, pure }

let make_Monad w: Monoid w -> Monad (Writer w) =
    let { (<>) } = w

    let flat_map f m : (a -> Writer w b) -> Writer w a -> Writer w b =
        let { value, writer } = f m.value
        { value, writer = m.writer <> writer }

    { flat_map }

let tell w: w -> Writer w () =
    { value = (), writer = w }

{ Writer, make_Functor, make_Applicative, make_Monad, tell }

let { Monad, Monoid } = import "std/prelude.glu"

type Writer w a = { value: a, writer: w }

let make w: Monoid w -> Monad (Writer w) = {
    (>>=) = \m g ->
        let { value, writer } = g m.value
        { value, writer = w.(<>) m.writer writer },
    return = \value -> { value, writer = w.empty }
}

let tell w: w -> Writer w () =
    { value = (), writer = w }

{ Writer, make, tell }

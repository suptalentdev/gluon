let { Eff, inject_rest, ? } = import! std.effect
let { map } = import! std.functor
let { wrap } = import! std.applicative
let { (<<) } = import! std.function

type State s a = forall r . (| Get | Put s .. r)

let extract_state x : forall s . [| state : State s | r |] a -> State s a = convert_variant! x

let send_state f : State s a -> Eff [| state : State s | r |] a = Impure (convert_effect! state f) Pure

let get : forall s . Eff [| state : State s | r |] s =
    send_state Get
let put s : s -> Eff [| state : State s | r |] () =
    send_state (Put s)

let modify f : (s -> s) -> Eff [| state : State s | r |] () =
    do s = get
    put (f s)

let run_state s eff : forall s . s -> Eff [| state : State s | r |] a -> Eff [| | r |] { state : s, value : a} =
    let loop state ve : _ -> Eff [| state : State _ | r |] a -> Eff [| | r |] { state : _, value : a } =
        match ve with
        | Pure value -> wrap { state, value }
        | Impure e f ->
            match extract_state e with 
            | Get ->
                loop state (f state)
            | Put state ->
                loop state (f state)
            | rest ->
                Impure (inject_rest rest) (loop state << f)
    loop s eff

let exec_state s eff : forall s . s -> Eff [| state : State s | r |] a -> Eff [| | r |] s =
    map (\r -> r.state) (run_state s eff)

let eval_state s eff : forall s . s -> Eff [| state : State s | r |] a -> Eff [| | r |] a =
    map (\r -> r.value) (run_state s eff)

{
    State,

    get,
    put,
    modify,
    run_state,
    exec_state,
    eval_state,
}

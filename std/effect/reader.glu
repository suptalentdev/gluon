let { Eff, inject_rest, ? } = import! std.effect
let { map } = import! std.functor
let { wrap } = import! std.applicative
let { (<<) } = import! std.function

type Reader s a = forall r . (| Ask .. r)

let extract_reader x : forall s . [| reader : Reader s | r |] a -> Reader s a = convert_variant! x

let send_reader f : Reader s a -> Eff [| reader : Reader s | r |] a = Impure (convert_effect! f) Pure

let ask : forall s . Eff [| reader : Reader s | r |] s =
    send_reader Ask

let asks f : forall s . (s -> a) -> Eff [| reader : Reader s | r |] a =
    map f ask

let local f eff : forall s . (s -> s) -> Eff [| reader : Reader s | r |] a -> Eff [| reader : Reader s | r |] a =
    do s = asks f
    let loop ve : Eff [| reader : Reader _ | r |] a -> Eff [| reader : Reader _ | r |] a =
        match ve with
        | Pure value -> wrap value
        | Impure e f ->
            match extract_reader e with 
            | Ask ->
                loop (f s)
            | rest ->
                Impure (inject_rest rest) (loop << f)
    loop eff

let run_reader s eff : forall s . s -> Eff [| reader : Reader s | r |] a -> Eff [| | r |] a =
    let loop reader ve : _ -> Eff [| reader : Reader _ | r |] a -> Eff [| | r |] a =
        match ve with
        | Pure value -> wrap value
        | Impure e f ->
            match extract_reader e with 
            | Ask ->
                loop reader (f reader)
            | rest ->
                Impure (inject_rest rest) (loop reader << f)
    loop s eff
{
    Reader,
    ask,
    asks,
    local,
    run_reader,
}

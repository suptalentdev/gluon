let { Eff, inject_rest, ? } = import! std.effect
let { map } = import! std.functor
let { wrap } = import! std.applicative
let { (<<) } = import! std.function
let { Reference, ref, (<-), load } = import! std.reference

type STRef s a = { __ref : Reference a }
type State s r a =
    | New : forall b . b -> State s r (STRef s b)
    | Read : STRef s a -> State s r a
    | Write : forall b . b -> STRef s b -> State s r ()
    .. r

let extract_state x : forall s . [| st : State s | r |] a -> State s r a = convert_variant! x

let send_state f : forall s . State s r a -> Eff [| st : State s | r |] a = Impure (convert_effect! st f) Pure

let new_ST_ref a : forall s . a -> Eff [| st : State s | r |] (STRef s a) = send_state (New a)
let read_ST_ref ref : forall s . STRef s a -> Eff [| st : State s | r |]  a =  send_state (Read ref)
let write_ST_ref a ref : forall s . a -> STRef s a -> Eff [| st : State s | r |] () = send_state (Write a ref)

let run_state eff : (forall s . Eff [| st : State s | r |] a) -> Eff [| | r |] a =
    let loop ve : forall s . Eff [| st : State s | r |] a -> Eff [| | r |] a =
        match ve with
        | Pure value -> wrap value
        | Impure e f ->
            match extract_state e with 
            | New a ->
                loop (f { __ref = ref a })
            | Read r ->
                let a = load r.__ref
                loop (f a)
            | Write a r ->
                r.__ref <- a
                loop (f ())
            | rest ->
                Impure (inject_rest rest) (loop << f)
    loop eff


{
    State,

    new_ST_ref,
    read_ST_ref,
    write_ST_ref,
    run_state,
}

//@NO-IMPLICIT-PRELUDE
let _ = import! std.io.types
let { wrap, flat_map } = import! std.io.prim
let { Bool } = import! std.types


#[implicit]
type Disposable a = {
    dispose : a -> IO (),
    is_disposed : a -> Bool,
}

let dispose ?disposable : [Disposable a] -> a -> IO () = disposable.dispose

let is_disposed ?disposable : [Disposable a] -> a -> Bool = disposable.is_disposed

let using disposable action : forall r . [Disposable a] -> a -> (a -> IO r) -> IO r =
    let result = action disposable
    do _ = dispose disposable
    result


{
    Disposable,

    dispose,
    is_disposed,
    using,
}

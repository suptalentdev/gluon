//@NO-IMPLICIT-PRELUDE

let { Bool, Option, Ordering } = import! std.types
let { Functor, Applicative, (*>), wrap } = import! std.applicative

/// `Semigroup a` represents an associative operation on `a`.
/// This means the following laws must hold:
///
/// * `forall x . append x (append y z) == append (append x y) z`
/// @implicit
type Semigroup a = {
    /// # Note
    ///
    /// * Known as `(<>)` or `mappend` in Haskell
    append : a -> a -> a
}

let make_Semigroup semigroup : Semigroup a -> _ =
    let { append } = semigroup

    let (<>) : a -> a -> a = append

    { append, (<>) }

let semigroup_Ordering : Semigroup Ordering = {
    append = \x y ->
        match x with
        | EQ -> y
        | _ -> x,
}

/// `Monoid a` represents an semigroup an which has an identity. This means
/// the following additional laws must hold:
///
/// * `forall x . append x empty == x`
/// * `forall x . append empty x == x`
/// @implicit
type Monoid a = {
    semigroup : Semigroup a,
    /// # Note
    ///
    /// * Known as `mempty` in Haskell
    empty : a
}

let monoid_Ordering : Monoid Ordering = {
    semigroup = semigroup_Ordering,
    empty = EQ,
}

/// `Group a` represents an monoid an which has an inverse element. This means
/// the following additional laws must hold:
///
/// * `forall x . append (inverse x) x = empty = append x (inverse x)`
/// @implicit
type Group a = {
    monoid : Monoid a,
    /// The inverse operation
    inverse : a -> a
}

/// `Eq a` defines equality (==) on `a`
/// @implicit
type Eq a = { (==) : a -> a -> Bool }

let (==) eq : [Eq a] -> a -> a -> Bool = eq.(==)
let (/=) eq l r : [Eq a] -> a -> a -> Bool = if (eq.(==) l r) then False else True

/// `Ord a` defines an ordering on `a`
/// @implicit
type Ord a = { eq : Eq a, compare : a -> a -> Ordering }

let (<=) ord l r : [Ord a] -> a -> a -> Bool =
    match ord.compare l r with
    | LT -> True
    | EQ -> True
    | GT -> False

let (<) ord l r : [Ord a] -> a -> a -> Bool =
    match ord.compare l r with
    | LT -> True
    | EQ -> False
    | GT -> False

let (>) ord l r : [Ord a] -> a -> a -> Bool =
    match ord.compare l r with
    | LT -> False
    | EQ -> False
    | GT -> True

let (>=) ord l r : [Ord a] -> a -> a -> Bool =
    match ord.compare l r with
    | LT -> False
    | EQ -> True
    | GT -> True

/// The basic operation on numbers.
/// Defined for both the primitive type `Int` and `Float`
/// @implicit
type Num a = {
    ord : Ord a,
    (+) : a -> a -> a,
    (-) : a -> a -> a,
    (*) : a -> a -> a,
    (/) : a -> a -> a,
    negate : a -> a
}

let (+) num : [Num a] -> a -> a -> a = num.(+)
let (-) num : [Num a] -> a -> a -> a = num.(-)
let (*) num : [Num a] -> a -> a -> a = num.(*)
let (/) num : [Num a] -> a -> a -> a = num.(/)

/// @implicit
type Category (cat : Type -> Type -> Type) = {
    id : forall a . cat a a,
    compose : forall a b c . cat b c -> cat a b -> cat a c
}

let make_Category category : Category cat -> _ =
    let { id, compose } = category


    /// Right-to-left composition. Alias for `compose`.
    let (<<) : forall a b c . cat b c -> cat a b -> cat a c = compose
    /// Left-to-right composition. Alias for `compose`, but with the arguments flipped.
    let (>>) f g : forall a b c . cat a b -> cat b c -> cat a c = compose g f

    { id, compose, (<<), (>>) }

/// @implicit
type Alternative f = {
    applicative : Applicative f,
    or : forall a . f a -> f a -> f a,
    empty : forall a . f a
}

let make_Alternative alternative : Alternative f -> _ =
    let { applicative, or, empty } = alternative

    let (<|>) : f a -> f a -> f a = or

    { applicative, or, empty, (<|>) }

/// A generalised interface for imperatively sequencing actions
/// @implicit
type Monad (m : Type -> Type) = {
    applicative : Applicative m,
    /// This can be seen as akin to sequential variable binding in an
    /// imperative language. For example in Javascript:
    ///
    /// ```js
    /// var x = call_fallible("hello");
    /// do_something(x);
    /// ```
    ///
    /// In gluon this would look like:
    ///
    /// ```gluon
    /// result.monad.flat_map (\x -> do_something x) (call_fallible "hello")
    /// ```
    ///
    /// Note that it is sometimes more ergonomic to use the `(>>=)` operator:
    ///
    /// ```gluon
    /// let { (>>=) } = make_Monad result.monad
    ///
    /// call_fallible "hello" >>= (\x -> do_something x)
    /// ```
    ///
    /// # Note
    ///
    /// * Known as `(=<<) or `flip (>>=)` in Haskell
    /// * Known as `Option::and_then` and `Result::and_then` in Rust
    flat_map : forall a b . (a -> m b) -> m a -> m b
}

let make_Monad monad : Monad m -> _ =
    let { applicative, flat_map } = monad

    let (=<<) : (a -> m b) -> m a -> m b = flat_map
    let (>>=) x f : m a -> (a -> m b) -> m b = flat_map f x

    let join mm : m (m a) -> m a = mm >>= (\x -> x)

    { applicative, flat_map, (=<<), (>>=), join }

/// `Show a` represents a conversion function from `a` to a readable string.
/// @implicit
type Show a = { show : forall a . a -> String }

/// @implicit
type Foldable (f : Type -> Type) = {
    foldr : forall a b . (a -> b -> b) -> b -> f a -> b,
    foldl : forall a b . (b -> a -> b) -> b -> f a -> b
}

let make_Foldable foldable : Foldable t -> _ =
    let { foldr, foldl } = foldable

    let concat monoid : Monoid m -> t m -> m =
        foldr monoid.semigroup.append monoid.empty

    let concat_map monoid f : Monoid m -> (a -> m) -> t a -> m =
        foldr (\x -> monoid.semigroup.append (f x)) monoid.empty

    let fold_m monad f z : Monad m -> (a -> b -> m a) -> a -> t b -> m a =
        foldl (\acc y -> monad.flat_map (\x -> f x y) acc) (monad.applicative.wrap z)

    let find pred : (a -> Bool) -> t a -> Option a =
        let go acc next =
            match acc with
            | None -> if pred next then Some next else None
            | Some _ -> acc

        foldl go None

    let find_map pred : (a -> Option b) -> t a -> Option b =
        let go acc next =
            match acc with
            | None -> pred next
            | Some _ -> acc

        foldl go None

    let all pred : (a -> Bool) -> t a -> Bool =
        foldl (\acc x -> acc && pred x) True

    let any pred : (a -> Bool) -> t a -> Bool =
        foldl (\acc x -> acc || pred x) False

    let elem eq x : Eq a -> a -> t a -> Bool =
        any (eq.(==) x)

    let count : t a -> Int =
        foldl (\acc _ -> acc #Int+ 1) 0

    {
        foldr,
        foldl,
        fold_m,
        concat,
        concat_map,
        find,
        find_map,
        all,
        any,
        elem,
        count,
    }

/// @implicit
type Traversable t = {
    functor : Functor t,
    foldable : Foldable t,
    traverse : forall a b m . Applicative m -> (a -> m b) -> t a -> m (t b)
}

let make_Traversable traversable : Traversable t -> _ =
    let { functor, foldable, traverse } = traversable

    let sequence applicative : Applicative m -> t (m a) -> m (t a) =
        traverse applicative (\x -> x)
    let for applicative x f : Applicative m -> t a -> (a -> m b) -> m (t b) =
        traverse applicative f x

    { functor, foldable, traverse, sequence, for }

{
    Ordering,

    Semigroup,
    make_Semigroup,
    semigroup_Ordering,

    Monoid,
    monoid_Ordering,

    Group,

    Eq,
    (==), (/=),

    Ord,
    (<), (<=), (>=), (>),

    Category,
    make_Category,

    Functor,

    Applicative,

    Alternative,
    make_Alternative,

    Monad,
    make_Monad,

    Foldable,
    make_Foldable,

    Traversable,
    make_Traversable,

    Num,
    (+), (-), (*), (/),

    Show,
}

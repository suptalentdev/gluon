//@NO-IMPLICIT-PRELUDE

let { Semigroup, Monoid, Group, Eq, Ord, Ordering, Num, Show } = import! "std/prelude.glu"

let additive =
    let semigroup : Semigroup Int = {
        append = \x y -> x #Int+ y
    }

    let monoid : Monoid Int = {
        semigroup = semigroup,
        empty = 0
    }

    let group : Group Int = {
        monoid = monoid,
        inverse = \x -> 0 #Int- x
    }

    { semigroup, monoid, group }

let multiplicative =
    let semigroup : Semigroup Int = {
        append = \x y -> x #Int* y
    }

    let monoid : Monoid Int = {
        semigroup = semigroup,
        empty = 1
    }

    { semigroup, monoid }

let eq = {
    (==) = \l r -> l #Int== r
}

let ord = {
    eq = eq,
    compare = \l r -> if l #Int< r then LT else if l #Int== r then EQ else GT
}

let num = {
    ord = ord,
    (+) = additive.semigroup.append,
    (-) = \l r -> l #Int- r,
    (*) = multiplicative.semigroup.append,
    (/) = \l r -> l #Int/ r,
    negate = additive.group.inverse
}

let show : Show Int = {
    show = prim.show_int
}

{
    additive,
    multiplicative,
    eq,
    ord,
    num,
    show,
    ..
    int_prim
}
